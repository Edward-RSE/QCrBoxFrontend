'''A command to automatically clean up any db entries created as a part of
the included robots framework testing suites.  By default, this will remove
all users and groups with names starting with the prefix `_ROBOT_`, and any
datasets or session references created by or linked to those users. 

Invoke with:
`python manage.py cleanup_robot_data`

'''

import logging
from django.contrib.auth.models import User, Group
from django.core.management.base import BaseCommand

from qcrbox import api
from qcrbox.models import FileMetaData, ProcessStep, SessionReference

LOGGER = logging.getLogger(__name__)
PREFIX = '_ROBOT_'

class Command(BaseCommand):
    '''Config for the Command class'''

    def handle(self, *args, **options):

        # Find all autogenerated robot users, marked with username prefixes of _ROBOT_
        r_users = User.objects.filter(username__startswith=PREFIX)      # pylint: disable=no-member

        # Fetch any data files generated by robot users
        r_data = FileMetaData.objects.filter(user__in=r_users)          # pylint: disable=no-member

        # Remove any process steps leading to robot data
        r_processes = ProcessStep.objects.filter(outfile__in=r_data)    # pylint: disable=no-member
        r_processes.delete()

        # Then remove the datasets
        for dataset in r_data.filter(active=True):
            api.delete_dataset(dataset.backend_uuid)
        r_data.delete()

        # Remove any lingering session references tagged to robots
        r_refs = SessionReference.objects.filter(user__in=r_users)      # pylint: disable=no-member
        for ref in r_refs:
            api.close_session(ref.session_id)
        r_refs.delete()

        # Cleanup the robot users
        r_users.delete()

        # Cleanup any robot groups, marked with name prefixes of _ROBOT_
        r_groups = Group.objects.filter(name__startswith=PREFIX)        # pylint: disable=no-member

        r_groups.delete()
