from django.core.management.base import BaseCommand
from django.contrib.auth.models import User, Group
import logging

from core import settings
from ... import api, models

LOGGER = logging.getLogger(__name__)

class Command(BaseCommand):
    '''Config for the Command class'''

    def handle(self, *args, **options):

        # Find all autogenerated robot users, marked with username prefixes of _ROBOT_
        robot_users = User.objects.filter(username__startswith='_ROBOT_')

        # Fetch any data files generated by robot users
        robot_data = models.FileMetaData.objects.filter(user__in=robot_users)

        # Remove any process steps leading to robot data
        robot_processes = models.ProcessStep.objects.filter(outfile__in=robot_data)
        robot_processes.delete()

        # Then remove the datasets
        for dataset in robot_data:
            api.delete_dataset(dataset.backend_uuid)
        robot_data.delete()

        # Remove any lingering session references tagged to robots
        robot_refs = models.SessionReference.objects.filter(user__in=robot_users)
        robot_refs.delete()

        # Cleanup the robot users
        robot_users.delete()

        # Cleanup any robot groups, marked with name prefixes of _ROBOT_
        robot_groups = Group.objects.filter(name__startswith='_ROBOT_')

        robot_groups.delete()
